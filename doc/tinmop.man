.TH "tinmop" "1"

.SH "Name"
.PP
tinmop - a client for mastodon or pleroma social network

.SH "Synopsis"
.PP
tinmop [OPTION]...

.SH "Description"
.PP
This document assumes basic knowledge of how mastodon works. More
information about this topic can be found on the
official website (\fIhttps://docs.joinmastodon.org/\fP).

.PP
Tinmop propose a terminal interface to to connect with Mastodon or
Pleroma social network

.SH "Options"
.PP
Without options the program will start a terminal interface and will
try to connect to your instance (see \fIConfiguration\fP)

.TP
\fB-e, --execute-script SCRIPT-FILE\fP
Execute a script file
.TP
\fB-c, --check-follows-requests    \fP
Checks for follow request at start
.TP
\fB-u, --update-timeline           \fP
Update the selected timeline
.TP
\fB-t, --timeline TIMELINE-NAME    \fP
Start using this timeline
.TP
\fB-f, --folder FOLDER-NAME        \fP
Start on that folder
.TP
\fB-v, --version                   \fP
Print program version and exit
.TP
\fB-h, --help                      \fP
print program help and exit

.SH "Usage"
.PP
Users of Tinmop are expected to interact with the social network
using a terminal interface (TUI), The terminal screen layout is
sketched below:

.RS
.nf
\fC+---------------+---------------------------+
|               |                           |
| tags window   |      thread windows       |
|               |                           |
|               |  modeline                 |
+---------------+---------------------------+
|               |                           |
| conversations |      message window       |
|    window     |                           |
|               |                           |
|               |                           |
+---------------+---------------------------+
|              command window               |
+-------------------------------------------+

\fP
.fi
.RE

.PP
The screen is subdivided in five window:

.TP
\fBtag window\fP
shows the tag users subscribed for and available
messages for each tag;

.TP
\fBthreads window\fP
for a given timeline and folder (see \fIFolders\fP) show
the discussions saved in user's local database;

.TP
\fBconversations window\fP
show the \fIprivate\fP conversations the user is having with others;

.TP
\fBmessage window\fP
show the body of the message selected in the tag window

.TP
\fBcommand window\fP
the window where the user instruct the software to perform commands

.PP
The only way to interact with the program is using the keyboard.
There is a contextual help that appears when the user input data
that provide hints about commands and a quick help window that can
be shown by hitting \fC?\fP (if this keybinding has not been
customized).

.SS "Folders"
.PP
A folder is an object to groups messages for each timeline an
arbitrary number of folder can be created, when the last message of
a folder is deleted the folder is deleted as well.

.SH "Configuration"
.PP
The configuration of tinmop is based on text files but there are
available two different kind with different syntax and scope.

.IP \(em 4
a key value text files used to configure the access credential to
.PP
server and visual theme of the program (simple configuration);

.IP \(em 4
common lisp source code. Used to write module (AKA plugin) and to
.PP
configure keybindings to interact with the software.

.PP
The distribution of this software comes with a bunch of pre-backed
configuration files but user is expected to write a simple file with
their credential to log into the server.

.SS "Simple configuration"
.PP
This is a simple file with each entry in a single line that look like this:

.RS
.nf
\fC
# a file can be included in another with this directive:
use "default-theme.conf"

# a line starting with a '#' is a comment
# The server instance name
server = server address

# your username
username = username

\fP
.fi
.RE

.PP
Not incidentally the information in the example above are the
absolute minimum the user has to provide before starts the program:
the name you chose when you made the account on the server and the
address of the server.

.PP
As you can see a line starting with a \fB#\fP is considered comment and
skipped by the program

.PP
The file with this credential are confidential and must be put into
user's home directory under the path
\fC/home/username/.local/share/tinmop/\fP. Probably the directory
\fCtinmop\fP does not exists on user system, if it does not exists must
be created manually.

.PP
If the program was installed correctly two other files with simple
semantics are located in your system wide configuration directory
(usually \fC/etc/tinmop/\fP), please check these files for more
information, as are extensively commented.

.SS "Lisp program"
.PP
These files contains Common lisp (see \fIhttps://common-lisp.net\fP)
source code. And are used both as a way to configure the program
and to write module for tinmop itself.

.PP
These files are the only way to configure program's keybindings:
sequence of pressing button to fire command commands (do not worry
it is not too difficult!).

.PP
These files must be a valid Common Lisp program to allow the
program to even starts. Again this is actual source code that is
loaded end executed by the main program; be careful, do not copy
and paste code from untrusted sources as this could results in a
\fBsevere\fP security damage.

.PP
Again in the configuration directory there is a (commented) file
named \fCinit.lisp\fP that user can use as their starting point to
write their files. A custom init file (or other module files must
be located into the directory \fC/home/username/.local/share/tinmop/\fP
to be successfully loaded.

.PP
However there is no need to write their own init file if user is
happy with the provided one by the package maintainers.

.SH "First time start"
.PP
After the configuration the program can be started but we are not
ready to join the network yet because tinmop need to be \fItrusted\fP by
the server. Just follows the instruction on screen to register the
application with your instance. This procedure should be followed
once. When the program starts for the first time (but please note
that there must be a file with valid credentials available).

.SH "Modules and scripts"
.PP
Users can write modules and scripts for tinmop, both are lisp
program so there is no artificial limiting to what they can do, the
only difference is that the script are loaded without the TUI so
they are useful for non interactive tasks.

.PP
An example of module is the distributed file \fCinit.lisp\fP and users
can find a simple script to send a toot in the their system wide
documentation directory (sometimes: \fC/usr/share/doc/\fP).

.SH "How to get more help"
.PP
For help with mastodon visit the mastodon website.

.PP
The program has an inline help (default binding for help is "?")

.PP
Moreover you can have some useful hint at the program web page:

.PP
\fIhttps://www.autistici.org/interzona/tinmop/\fP

.SH "BUGS"
.PP
There are many, totally unknown, hiding in the code! Please help the
programmer to nail them using the
https://notabug.org/cage/tinmop/issues/ \fBat\fP \fIissue tracker\fP.

.SH "Contributing"
.PP
There is always need for help, you can join the developer, sending
patches or translating the UI to your favourite language.

.PP
Just point your browser to the
https://notabug.org/cage/tinmop/ \fBat\fP \fIcode repository\fP.

.PP
See also the file CONTRIBUTE.org

.SH "Privacy"
.PP
This program do not interact with no other computer other than the
mastodon instance that the user configured.

.PP
If installed from the source note that the script
\fCquick_quicklisp.sh\fP will contact \fIhttps://www.quicklisp.org/\fP,
check the
https://beta.quicklisp.org/quicklisp.lisp \fBat\fP \fIquicklisp sources\fP
for details.

.SH "Acknowledgment"
.PP
See file LICENSES.org
